#include <bits/stdc++.h>
using namespace std;


class animal{
    private:
        int age;
        string gender;
    public:
        string color;
    
    void AgeGender(int age1, string gender1);
    void infoAnimal(){
        
        cout<<"Age: "<< age << endl;
        cout<<"Gender: "<< gender << endl;
        cout<<"Color: "<< color << endl;
    }
};

void animal :: AgeGender(int age1, string gender1){
   age = age1;
   gender = gender1;
}

int main(){

    animal dog;
    dog.AgeGender(7, "male");
    dog.color = "white";
    dog.infoAnimal();

    animal lion;
    lion.AgeGender(9, "female");
    lion.color = "brown";
    lion.infoAnimal();

    return 0;
}

















class binary{

        string s;

    public:

        void read(void);
        void chk_binary(void);
        void ones_compliment(void);
        void display(void);

};


void binary :: read(void){
    cout<<"Enter a Binary Number : " ;
    cin>>s;
    cout << endl;
}


void binary :: chk_binary(void){

    for(int i = 0; i < s.length(); i++){
        if(s.at(i) != '0' && s.at(i) != '1'){
            cout<<"Incorect binary Formate" << endl;
            break;  //exit(0); 
        }
    } 
}


void binary :: ones_compliment(void){


    for(int i = 0; i < s.length(); i++){
        if(s.at(i) == '0')
            s.at(i) = '1';
        else{
            s.at(i) = '0';
        }
    }
} 


void binary :: display(void){

    cout<< "Ones Complinent : " ;

    for(int i = 0; i<s.length(); i++){
        cout<<s.at(i);
    }
    cout<< endl;
}



int main(){


    binary a;
    a.read();
    a.chk_binary();
    a.ones_compliment();
    a.display();


    return 0;
}















class dukan{

    int itemId[100];
    int itemPrice[100];
    int counter;

    public:
        void initcounter(void){counter = 0;}
        void setprice(void);
        void displayprice(void);
};


void dukan :: setprice(void){
    cout<< "Enter Id of your item on " << counter+1 << endl;
    cin>>itemId[counter];
    cout<< "Enter price of your item" << endl;
    cin>>itemPrice[counter];
    counter++;
}


void dukan :: displayprice(void){
    for(int i = 0; i<counter; i++){
        cout<<  "The price of item with Id " << itemId[i] << " is " << itemPrice[i] << endl;
    }
}


int main(){

    dukan shop; 
    shop.initcounter();
    shop.setprice();
    shop.setprice();
    shop.setprice();
    shop.displayprice();


    return 0;
}















class employee{
		int id;
		//static int count = 1000;// syntax error
		static int count;

		public:
			void setData(void){
				cout<< "Enter the id" << endl;
				cin>>id;
				count++;
			}
			void getData(void){
				//cout<< id;
				cout<< "The id of this employee is " << id << "and this is employee number" << count << endl;
			}


			static void getcount(void){				// static function
				cout<< "The value of count is " << count << endl;
			}
	};

	int employee :: count;	//default value is 0
	//int employee :: count = 1000;

	int main(){

		employee harry, rohan, lovish;
		//employee harry;
		//harry.id = 1;
		//harry.count = 1;//cannot do this as id and count are private
		harry.setData();
		harry.getData();
		employee :: getcount();

		rohan.setData();
		rohan.getData();
		employee :: getcount();

		lovish.setData();
		lovish.getData();
		employee :: getcount();


		return 0;
	}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // code with harry - video 25 
/* 
class Employee{

	int id;
	int salary;

	public:
		void setId(void){
			salary = 122;
			cout<< "Enter the id of employee" << endl;
			cin>> id;
		}

		void getId(void){
			cout<< "the id of this employee is " << id << endl;
		}
};
 */


class Complex{
	int a;
	int b;
public:
	void setData(int v1, int v2){
		a = v1;
		b = v2;
	}
	void setDataBySum(Complex o1, Complex o2){
		a = o1.a + o2.a;
		b = o1.b + o2.b;
	}
	void printNumber(void){
		cout<<"Your complex number is " << a << " + " << b << "i" << endl;
	}
};


int main(){
/* 
	Employee fb[4];
	for(int i = 0; i<4; i++){
		fb[i].setId();
		fb[i].getId();
	}
 */



	Complex c1, c2, c3;
	c1.setData(1,2);
	c1.printNumber();

	c2.setData(3,4);
	c2.printNumber();

	c3.setDataBySum(c1, c2);
	c3.printNumber();

	return 0;
}














class Complex{
	int a;
	int b;

	public:
		void setNumbers(int n1, int n2){
			a = n1;
			b = n2;
		}

		friend Complex sumComplex(Complex o1, Complex o2);

		void printNumber(){
			cout<< "Your number is " << a << " + " << b << "i" << endl;
		}
};

Complex sumComplex(Complex o1, Complex o2){
	Complex o3;
	o3.setNumbers((o1.a + o2.a), (o1.b + o2.b));
	return o3;
}


int main(){

	Complex c1, c2, sum;
	c1.setNumbers(1,4);
	c2.setNumbers(5,8);
	c1.printNumber();
	c2.printNumber();

	sum = sumComplex(c1, c2);
	sum.printNumber();


	return 0;
}














// Forward declaration;
class Complex;

class Calculator{
	public:
		int add(int a, int b){
			return (a + b);
		}

		int sumRealComplex(Complex, Complex);
		int sumcompComplex(Complex, Complex);
};

class Complex{
	int a, b;
	friend int Calculator :: sumRealComplex(Complex, Complex);
	friend int Calculator :: sumcompComplex(Complex, Complex);

	public:
		void setNumber(int n1, int n2){
			a = n1; 
			b = n2;
		}

		void printNumber(){
			cout<< "Your number is " << a << " + " << b << "i" << endl;
		}
};

int Calculator :: sumRealComplex(Complex o1, Complex o2){
	return(o1.a + o2.a);
}
int Calculator :: sumcompComplex(Complex o1, Complex o2){
	return(o1.b + o2.b);
}


int main(){

	Complex o1, o2;
	o1.setNumber(1,4);
	o2.setNumber(5,7);

	Calculator calc;
	int res = calc.sumRealComplex(o1, o2);
	cout<< "The sum of real part of o1 and o2 is " << res << endl;

	int resc = calc.sumcompComplex(o1, o2);
	cout<< "The sum of real part of o1 and o2 is " << resc << endl; 

	return 0;
}















//code tantra
/* 
#include <bits/stdc++.h>
using namespace std;

struct Student{
	string name;
	int marks;
};

bool compare(Student a, Student b){
	if(a.marks != b.marks)
		return a.marks>b.marks ;
	return a.name<b.name;
}

int main(){
	int N;
	cin>N;
	vector<Student> students(N);
	for(int i = 0; i<N; i++){
		cin>>students[i].name>>students[i].marks;
	}

	sort(students.begin(), students.end(), compare);

	for(auto s:students){
		cout<< s.name <<" "<< s.marks << endl;
	}
	return 0;
}
 */







//code tantra
/* 
#include <bits/stdc++.h>
#include <vector>
#include <algorithm>

using namespace std;



int main(){
	int Q = 0;
	cin>>Q;
	vector<int> A;

	while(Q>0){
		char cmd;
		cin>>cmd;

		if(cmd == 'a'){
			int x = 0;
			cin>>x;
			A.push_back(x);
		}
		if(cmd == 'b'){
			sort(A.begin(), A.end());
		}
		if(cmd == 'c'){
			reverse(A.begin(), A.end());
		}
		if(cmd == 'd'){
			cout<<A.size()<<' ';
		}
		if(cmd == 'e'){
			for(auto i: A){
				cout<< i <<' ';
			}
		}
		if(cmd == 'f'){
			sort(A.begin(), A.end(),[](int a, int b){return a>b;});
		}
		Q--;
	}
	return 0;
}

 */
















//code with harry video 28


class Y;

class X{
    int data;
        public:
        void setValue(int value){
            data = value;
        }
        friend void add(X , Y);
};

class Y{
    int num;
        public:
        void setValue(int value){
            num = value;
        }
        friend void add(X , Y);
};


void add(X o1, Y o2){
    //cout<< "Sum is : " << o1.setValue(int value)+o2.setValue(int value) << endl;
    cout<< "Sum is : " << o1.data + o2.num << endl;
}



int main(){

    X a1;
    a1.setValue(2);
    Y b1;
    b1.setValue(3);

    add(a1, b1);

    return 0;
}
















//call by reference variable;

void swap(int &a, int &b){
    int temp = a;
    a = b;
    b = temp;
}


int main(){

    int x = 2;
    int y = 4;

    swap(x,y);
    cout<<x;
    cout<<y;

    return 0; 
}



//call by reference pointer

void swapPointer(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main(){

    int x = 3;
    int y = 6;

    swapPointer(&x, &y);
    cout<<x << endl;
    cout<< y;

    return 0;
}

















//code with harry - video 30

class point{
    int a;
    int b;

    public:
        point(int x, int y){
            a = x;
            b = y;
        } 

        void displayPoint(void){
            cout<< "Point is (" << a << "," << b << ")" << endl;
        }

        friend void distancebwtPoints(point , point );

};


void distancebwtPoints(point o1, point o2){
                    int d;
                    d = sqrt(pow((o2.a - o1.a),2) + pow((o2.b - o1.b),2));
                    cout<<"distance between two points : " << d << endl;
                }



int main(){

    point p(1,0);
    point q(70,0);
    
    
    // p1.setPoint(1,2);
     p.displayPoint();
    // p2.setPoint(3,4);
     q.displayPoint();

    distancebwtPoints(p,q);

    

    return 0;
}











//Pointers - array in objects


class Complex{
    int real;
    int imaginary;

    public:
        void setData(int a, int b){
            real = a;
            imaginary = b;
        }

        void getData(){
            cout<< "real No. = " << real << endl;
            cout<< "imaginary No. = " << imaginary << endl;
        }

};


int main(){

    // int A[5] = {1, 2, 3, 4, 5};
    
    // int *p = A;

    // cout<< A << endl; 
    // cout<<&A << endl;
    // cout<<&A[0] << endl;


    // Complex c1;
    // c1.setData(1, 3);
    // c1.getData();


    //Complex c1;
    //Complex *ptr = &c1;

    //Complex *ptr = new Complex;

    //three basic thing i have to keep in mind;
    // * = dereference hojata he 
    // & = address aajata he 
    // new = new object or anything int, float, string ... 


    // (*ptr).setData(9,8);
    // (*ptr).getData();


    // ptr->setData(6,7);
    // ptr->getData(); 


    // c1->setData(2,5);
    // c1->getData();


    //array of objects:

    // Complex *ptr = new Complex[4];
    // ptr->setData(8,4);
    // ptr->getData();

    

    return 0;
}











//pointers @code with harry
    class shop{
        int id;
        int price;
        public:
            void setData(int a, float b){
                id = a;
                price = b;
            }
            void getData(void){
                cout<<"id no. = " << id << endl;
                cout<<"price = " << price << endl;
            }

    };



int main(){

    

    int p, i;
    float q;
    shop *ptr  =  new shop[3];
    shop *ptrtemp = ptr;
    for(i = 0; i<3; i++){
        cout<< "Enter id and price of the item : " << i+1 << endl;
        cin>>p>>q;
        ptr->setData(p,q);
        ptr++;
    }
    for(i = 0; i<3; i++){
        cout<<"Item No. = " << i+1 << endl;
        ptrtemp->getData();
        ptrtemp++;
    }


    return 0;
}









//vector code with harry

void display(vector<int> &v){
    for(int i = 0; i<v.size(); i++){
        cout<<v[i]<<" ";
    }
    cout<< endl;
}


int main(){

    vector<int> vec1;

    for(int i = 0; i<4; i++){
        int element;
        cin>>element;
        vec1.push_back(element);

    }
    vec1.pop_back();
    display(vec1);

    return 0;
}

















//list STL


void display(list<int> &lst){

    list<int> :: iterator it;
    for(it = lst.begin(); it != lst.end(); it++){
        cout<< *it << " ";
    }
    cout<< endl;
}


int main(){

    //its does not store data in contiguous in memory

    list<int> list1;    //list of 0 length
    list1.push_back(1);
    list1.push_back(2);
    list1.push_back(3);
    list1.push_back(4);

    display(list1);

    list1.remove(3);    //remove from mid

    /* 
    list<int> :: iterator iter;
    iter = list1.begin();   //it creats reference 
    cout<< *iter << " ";    //value of iterator
    iter++;
    cout<< *iter<< " ";
    iter++;
    cout<< *iter << " ";
    iter++;
    cout<< *iter << " "; 
    */

   display(list1);


    return 0;
}










//maps


map<string, int> marksMap;




//-----------------------------------------------======-----------------------------------------












//hashing   - Apna college



int main(){

    
    map<int,int> mp;

    mp[3] = 1;

    cout<< mp[3] << endl;

    return 0;
}



















//-----------------------------SET-----------------------------------







int main(){

    //elements are in sorted order

    set<int> s;
    s.insert(1);
    s.insert(4);
    s.insert(3);
    s.insert(7);
    s.insert(2);

    //s.erase(s.begin());


    //Lower bound means element having the same key or greater than that.
    //Upper bound means greater than that key.
    cout<< *s.upper_bound(1) << endl;
    cout<< *s.lower_bound(1) << endl;
    cout<< *s.lower_bound(2) << endl;

    for(auto i : s){
        cout<< i <<" ";
    }



/* 
    for(auto i = s.begin(); i != s.end(); i++){
        cout<< *i << " ";
    }
*/

/* 
    s.erase(s.end());

    for(auto i : s){
        cout<< i << " "; 
    }
 */

    return 0;
}





















//-------------------

..LEETCODE
..LEETCODE
..LEETCODE
..LEETCODE..LEETCODE
..LEETCODE
..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE..LEETCODE







//Solution1: One Pass: One Pointer:

//TC: O(n) //iterate the array
//SC: O(n) //new array
//Time: 10 ms (52.96%), Space: 9.8 MB (61.25%)


class Solution {
public:
vector shuffle(vector& nums, int n) {

    //initialize a new vector
    vector<int> res;
    
    //loop over the half array elements
    for(int i=0;i<n;i++){
        //append the current elements
        res.push_back(nums[i]);
        //then, append the current one in the second half array
        res.push_back(nums[i+n]);
    }
    
    //return the new array elements
    return res;
}
};


-----------------------------------------------------------


//Solution1: One Pass: Two Pointers:

//TC: O(n) //iterate the array
//SC: O(n) //new array
//Time: 10 ms (52.96%), Space: 9.7 MB (85.33%)


class Solution {
public:
vector shuffle(vector& nums, int n) {

    //initialize a new vector with the same size of the given one
    vector<int> res(nums.size());
    
    //initialize two pointers i&j
    //loop over the half array elements with a pointer k
    for(int i=0, j=n, k=0;i<n;){
        //replace the current position with the first pointer value
        res[k++]=nums[i++];
        //replace the current position with the second pointer value
        res[k++]=nums[j++];
        
        //incremeant the three pointers by one step
    }
    
    //return the new array elements
    return res;
}
};



--------------------------------------------------------------


class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> answer;
        answer.reserve(2 * n);
        for (int i = 0; i < n; i++) {
            answer.push_back(nums[i]);
            answer.push_back(nums[i + n]);
        }
        return answer;
    }
};





--------------------------------------------------------------

















#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode
/* 
int binarySearch(int arr[], int n, int key){
    int s = 0;
    int e = n-1;

    while(s<=e){
        int mid = (s+e)/2;
        if(arr[mid] == key){
            return mid;
        }
        else if(arr[mid] > key){
            e = mid + 1;
        }
        else{
            s = mid + 1;
        }
    }
    return -1;

    
}


int main(){

    int n;
    cin>> n;

    int arr[n];

    for(int i = 0; i<n; i++){
        cin>>arr[i];
    }

    int key;
    cin>>key;

    cout<< binarySearch(arr, n, key) << endl;


    return 0;
} 
 */









#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode
/* 
class Solution{
    public:
        int maxSumArray(vector<int>& nums){
            int sum = 0;
            int maxi = nums[0];

            for(int i = 0; i<nums.size(); i++){
                sum = sum + nums[i];

                maxi = max(maxi, sum);

                if(sum < 0)
                    sum = 0;
            }
            return maxi;
        }
};


int main(){

    vector<int> arr;

    arr.push_back(1);
    arr.push_back(2);
    arr.push_back(4);
    arr.push_back(3);

    Solution a;
    cout<< a.maxSumArray(arr) << endl;

    return 0;
}
 */























#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode#leetcode
// Tapping Rainwater                                                    // Tapping Rainwater 
/* 
int rain_water(vector<int> a){
    stack<int>st;
    int n = a.size(), ans = 0;
    for(int i = 0; i<n; i++){
        while(!st.empty() && a[st.top()] < a[i]){
            int cur = st.top();
            st.pop();
            if(st.empty()){
                break;
            }
            int diff = i - st.top() - 1;
            ans += (min(a[st.top()], a[i]) - a[cur]) * diff;
        }
        st.push(i);
    }
    return ans;
}

int main(){

    vector<int> a = {0,1,0,2,1,0,1,3,2,1,2,1};
    cout<< rain_water(a);

    return 0;
}
 */







